import streamlit as st
import time
from random import shuffle

# Definir as perguntas de l√≥gica de programa√ß√£o
perguntas = [
    {
        "pergunta": "Qual √© o comando usado para exibir algo na tela em Python?",
        "respostas": ["echo", "printf", "print", "output"],
        "resposta_correta": "print"
    },
    {
        "pergunta": "Qual desses √© um tipo de dado primitivo em Python?",
        "respostas": ["Lista", "Dicion√°rio", "Inteiro", "Conjunto"],
        "resposta_correta": "Inteiro"
    },
    {
        "pergunta": "O que √© uma vari√°vel em programa√ß√£o?",
        "respostas": ["Um tipo de dado", "Uma opera√ß√£o matem√°tica", "Um espa√ßo na mem√≥ria para armazenar dados", "Uma fun√ß√£o"],
        "resposta_correta": "Um espa√ßo na mem√≥ria para armazenar dados"
    },
    {
        "pergunta": "Qual √© a estrutura de controle que permite repetir um bloco de c√≥digo v√°rias vezes?",
        "respostas": ["if", "else", "for", "def"],
        "resposta_correta": "for"
    },
    {
        "pergunta": "Qual √© o valor de 'x' ap√≥s executar o seguinte c√≥digo? `x = 5; x += 2`",
        "respostas": ["7", "5", "2", "10"],
        "resposta_correta": "7"
    },
    {
        "pergunta": "Qual comando em Python √© usado para criar uma fun√ß√£o?",
        "respostas": ["def", "function", "create", "func"],
        "resposta_correta": "def"
    },
    {
        "pergunta": "O que √© um loop infinito?",
        "respostas": ["Um loop que nunca termina", "Um loop que termina ap√≥s um n√∫mero fixo de itera√ß√µes", "Um loop usado apenas em fun√ß√µes", "Um tipo de estrutura condicional"],
        "resposta_correta": "Um loop que nunca termina"
    },
    {
        "pergunta": "Em qual tipo de estrutura de dados podemos armazenar pares de chave e valor?",
        "respostas": ["Lista", "Dicion√°rio", "Tupla", "Conjunto"],
        "resposta_correta": "Dicion√°rio"
    },
    {
        "pergunta": "Qual √© a principal fun√ß√£o do comando 'if'?",
        "respostas": ["Executar repetidamente um c√≥digo", "Executar um c√≥digo condicionalmente", "Definir uma vari√°vel", "Criar um loop"],
        "resposta_correta": "Executar um c√≥digo condicionalmente"
    },
    {
        "pergunta": "O que √© um algoritmo?",
        "respostas": ["Um tipo de dado", "Uma sequ√™ncia de instru√ß√µes para resolver um problema", "Um comando para exibir na tela", "Uma estrutura de repeti√ß√£o"],
        "resposta_correta": "Uma sequ√™ncia de instru√ß√µes para resolver um problema"
    }
]

# Fun√ß√£o para adicionar anima√ß√µes no texto
def animacao_pergunta(titulo):
    st.markdown(f"<h1 style='text-align: center; font-size: 3em; color: #FF6347; font-weight: bold;'>{titulo}</h1>", unsafe_allow_html=True)

def animacao_resposta(feedback):
    if feedback == "correto":
        st.markdown(f"<h2 style='text-align: center; color: #32CD32; font-size: 2em;'>Resposta Correta! ‚úÖ</h2>", unsafe_allow_html=True)
    else:
        st.markdown(f"<h2 style='text-align: center; color: #FF6347; font-size: 2em;'>Resposta Errada! ‚ùå</h2>", unsafe_allow_html=True)

# Fun√ß√£o principal do Streamlit
def app():
    # T√≠tulo e introdu√ß√£o
    st.title("Quiz de L√≥gica de Programa√ß√£o")
    st.write("Responda as perguntas sobre l√≥gica de programa√ß√£o e veja seu desempenho! Boa sorte! üéâ")

    # Estado de sess√£o para armazenar as respostas do usu√°rio
    if 'respostas_usuario' not in st.session_state:
        st.session_state.respostas_usuario = []
        st.session_state.pergunta_atual = 0
        st.session_state.pontuacao = 0

    # Exibir uma pergunta por vez
    pergunta_atual = st.session_state.pergunta_atual

    # Verificar se a pergunta_atual n√£o excede o n√∫mero de perguntas
    if pergunta_atual < len(perguntas):
        pergunta = perguntas[pergunta_atual]

        # Exibir anima√ß√£o na tela
        animacao_pergunta(pergunta["pergunta"])

        # Embaralhar as respostas para tornar o quiz mais din√¢mico
        shuffle(pergunta["respostas"])

        # Mostrar op√ß√µes de resposta com cores
        resposta_usuario = st.radio(
            "Escolha a resposta:", pergunta["respostas"], key=pergunta["pergunta"], 
            help="Escolha a resposta correta"
        )

        # Armazenar a resposta e calcular pontua√ß√£o
        if st.button("Pr√≥xima Pergunta"):
            # Verificar se a resposta do usu√°rio est√° correta
            if resposta_usuario == pergunta["resposta_correta"]:
                st.session_state.pontuacao += 1
                animacao_resposta("correto")
            else:
                animacao_resposta("errado")

            # Armazenar resposta do usu√°rio
            st.session_state.respostas_usuario.append({
                "pergunta": pergunta["pergunta"],
                "resposta_usuario": resposta_usuario,
                "resposta_correta": pergunta["resposta_correta"]
            })

            # Avan√ßar para a pr√≥xima pergunta ou terminar
            st.session_state.pergunta_atual += 1

    # Se j√° tiver terminado o quiz, exibir o resultado
    if st.session_state.pergunta_atual == len(perguntas):
        st.write("Quiz Conclu√≠do!")
        st.write(f"Voc√™ acertou {st.session_state.pontuacao} de {len(perguntas)} perguntas!")

        # Mostrar todas as perguntas com respostas corretas/erradas
        for resposta in st.session_state.respostas_usuario:
            if resposta["resposta_usuario"] == resposta["resposta_correta"]:
                st.write(f"**Pergunta**: {resposta['pergunta']}")
                st.write(f"**Sua resposta**: {resposta['resposta_usuario']} (Correta!)\n")
            else:
                st.write(f"**Pergunta**: {resposta['pergunta']}")
                st.write(f"**Sua resposta**: {resposta['resposta_usuario']} (Errada)")
                st.write(f"**Resposta correta**: {resposta['resposta_correta']}\n")

        # Feedback visual baseado na pontua√ß√£o
        if st.session_state.pontuacao == len(perguntas):
            st.success("ü•≥ Parab√©ns! Voc√™ acertou todas as perguntas!")
        elif st.session_state.pontuacao >= len(perguntas) / 2:
            st.warning("üëç Bom trabalho! Voc√™ fez um bom desempenho!")
        else:
            st.error("üòû Parece que voc√™ precisa estudar mais! Tente novamente.")

# Executar o app
if __name__ == "__main__":
    app()
